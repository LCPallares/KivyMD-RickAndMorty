rickmorty_app/
├── main.py
├── assets/
│   ├── fonts/
│   │   ├── font1
│   │   └── font2
│   └── images/
│       ├── logo.svg
│       └── placeholder.png
├── components/
│   ├── character_tile.py
│   └── character_tile.kv
├── controllers/
│   ├── auth_controller.py
│   ├── character_controller.py
│   └── favorites_controller.py
├── models/
│   ├── user_model.py
│   ├── favorite_model.py
│   └── database.py
├── views/
│   ├── auth/
│   │   ├── login.kv
│   │   ├── login.py
│   │   ├── register.kv
│   │   └── register.py
│   ├── characters/
│   │   ├── characters_list.kv
│   │   └── characters_list.py
│   └── favorites/
│       ├── favorites_list.kv
│       └── favorites_list.py
└── utils/
    ├── api_client.py
    └── helpers.py


# Carga explícita de archivos KV (opcional)
#from kivy.lang import Builder
# Builder.load_file('views/main.kv')
# Builder.load_file('views/auth/login.kv')
# Builder.load_file('views/auth/register.kv')
# Builder.load_file('views/tags/tags_manager.kv')
#Builder.load_file('components/character_tile2b.kv')




from kivy.app import App
from kivy.uix.screenmanager import ScreenManager
from controllers.auth_controller import AuthController
from controllers.character_controller import CharacterController
from controllers.favorites_controller import FavoritesController

class RickMortyApp(App):
    def build(self):
        self.sm = ScreenManager()
        
        # Inicializar controladores
        self.auth_controller = AuthController(self)
        self.character_controller = CharacterController(self)
        self.favorites_controller = FavoritesController(self)
        
        # Cargar pantallas de autenticación
        self.auth_controller.load_views()
        
        return self.sm

if __name__ == '__main__':
    RickMortyApp().run()



from kivy.app import App
from kivy.uix.screenmanager import ScreenManager
from controllers.auth_controller import AuthController
from controllers.character_controller import CharacterController
from controllers.favorites_controller import FavoritesController

class RickMortyApp(App):
    def build(self):
        self.sm = ScreenManager()
        
        # Inicializar controladores
        self.auth_controller = AuthController(self)
        self.character_controller = CharacterController(self)
        self.favorites_controller = FavoritesController(self)
        
        # Cargar pantallas
        self.auth_controller.load_views()
        self.load_character_views()
        self.load_favorites_view()
        
        return self.sm

    def load_character_views(self):
        from views.characters.characters_list import CharactersListScreen
        self.sm.add_widget(
            CharactersListScreen(
                name='characters_list',
                controller=self.character_controller
            )
        )

    def load_favorites_view(self):
        from views.favorites.favorites_list import FavoritesListScreen
        self.sm.add_widget(
            FavoritesListScreen(
                name='favorites_list',
                controller=self.favorites_controller
            )
        )


#:import FadeTransition kivy.uix.screenmanager.FadeTransition
#:include views/auth/loginscreen.kv
#:include views/auth/registerscreen.kv
#:include views/characters/characterslistscreen.kv
#:include views/favorites/favoriteslistscreen.kv



from kivy.app import App
from kivy.uix.screenmanager import ScreenManager

class RickMortyApp(App):
    def build(self):
        # Kivy cargará automáticamente rickmorty.kv
        self.sm = ScreenManager()
        
        # Los controladores y pantallas se cargarán automáticamente
        # gracias a las reglas de nombres de los archivos .kv
        from controllers.auth_controller import AuthController
        from controllers.character_controller import CharacterController
        from controllers.favorites_controller import FavoritesController
        
        self.auth_controller = AuthController(self)
        self.character_controller = CharacterController(self)
        self.favorites_controller = FavoritesController(self)
        
        # Cargar pantallas (sus .kv se cargarán automáticamente)
        self.auth_controller.load_views()
        self.load_character_view()
        self.load_favorites_view()
        
        return self.sm

    def load_character_view(self):
        from views.characters.characters_list import CharactersListScreen
        self.sm.add_widget(CharactersListScreen(
            name='characters_list',
            controller=self.character_controller
        ))

    def load_favorites_view(self):
        from views.favorites.favorites_list import FavoritesListScreen
        self.sm.add_widget(FavoritesListScreen(
            name='favorites_list',
            controller=self.favorites_controller
        ))

if __name__ == '__main__':
    RickMortyApp().run()



    BoxLayout:
        size_hint_y: None
        height: 50
        Button:
            text: 'Ver Favoritos'
            on_press: root.manager.current = 'favorites_list'
        Button:
            text: 'Volver a Personajes'
            on_press: root.manager.current = 'characters_list'





<CharacterImageButton>:
    size_hint: None, None
    size: 200, 200
    keep_ratio: True
    allow_stretch: True

<CharactersListScreen>:
    BoxLayout:
        size_hint_y: None
        height: 50
        spacing: 10
        padding: 5
        canvas.before:
            Color:
                rgba: 0.2, 0.2, 0.2, 1
            Rectangle:
                pos: self.pos
                size: self.size

        Button:
            text: 'Personajes'
            on_press:
                #app.root.current = 'characters_list'
                print(2222222)
                root.manager.current = 'favorites_list'
        Button:
            text: 'Favoritos'
            on_press:
                print(55555)
                #app.root.current = 'favorites_list'
                #root.manager.current = 'favorites_list'
                app.sm.current = 'favorites_list'
        Button:
            text: 'Cerrar Sesión'
            on_press: 
                app.auth_controller.logout()
                #app.root.current = 'login'
                app.root.get_screen('login')
    ScrollView:
        GridLayout:
            cols: 2
            size_hint_y: None
            height: self.minimum_height
            spacing: 10
            padding: 10

            AsyncImage:
                source: 'https://rickandmortyapi.com/api/character/avatar/1.jpeg'
                size_hint: None, None
                size: 200, 200
                keep_ratio: True
                allow_stretch: True

            Label:
                text: 'Rick Sanchez'
                size_hint_y: None
                height: 30

            Button:
                text: '❤️' if False else '🤍'
                size_hint: None, None
                size: 50, 50
                on_press: app.root.get_screen('characters_list').toggle_favorite({'id': 1, 'name': 'Rick Sanchez', 'image': 'https://rickandmortyapi.com/api/character/avatar/1.jpeg'})

            Button:
                text: 'Favoritos'
                on_press:
                    print(55555)
                    #app.root.current = 'favorites_list'
                    #root.manager.current = 'favorites_list'
                    app.sm.current = 'favorites_list'






from utils.api_client import RickMortyAPI
from models.favorite_model import Favorite
from views.characters.characters_list import CharactersListScreen

class CharacterController:
    def __init__(self, app):
        self.app = app

    def load_views(self):
        self.app.sm.add_widget(
            CharactersListScreen(name='characters_list', controller=self)
        )
        self.app.sm.current = 'characters_list'
        print(111)

    def get_characters(self, page=1):
        return RickMortyAPI.get_characters(page)

    def toggle_favorite(self, character):
        user_id = self.app.auth_controller.current_user['id']
        character_id = character['id']
        
        # Verificar si ya es favorito
        favorites = Favorite.get_user_favorites(user_id)
        is_favorite = any(fav['character_id'] == character_id for fav in favorites)
        
        if is_favorite:
            return Favorite.remove_favorite(user_id, character_id)
        else:
            return Favorite.add_favorite(
                user_id,
                character_id,
                character['name'],
                character['image']
            )









